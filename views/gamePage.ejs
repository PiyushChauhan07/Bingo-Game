<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Go binGo | <%= roomid %>
  </title>
  <link rel="stylesheet" href="/css/home.css">



  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
    integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
    crossorigin="anonymous"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
    crossorigin="anonymous"></script>
  <!-- font awesome -->
  <script src="https://kit.fontawesome.com/b9c831b2f3.js" crossorigin="anonymous"></script>
  <!-- Font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Arima+Madurai&family=Cabin+Sketch:wght@700&family=Cinzel+Decorative:wght@900&family=Kaushan+Script&family=Love+Ya+Like+A+Sister&family=Press+Start+2P&family=Raleway:wght@300&family=Roboto:wght@300&display=swap"
    rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noty/3.1.4/noty.min.css" integrity="sha512-0p3K0H3S6Q4bEWZ/WmC94Tgit2ular2/n0ESdfEX8l172YyQj8re1Wu9s/HT9T/T2osUw5Gx/6pAZNk3UKbESw==" crossorigin="anonymous" />
</head>

<body>
  
  <audio src="/music/sound.mp3" id="my_audio" loop="true"  autoplay></audio>

  <div class="header">
    <div class="vol">
      
      <img id="volume-button" src="/images/speaker.png" onclick="changeImage()">
      <!-- <div class="speech-bubble">
        <h1 style="font-size: 2rem;">6</h1>
      </div> -->
    </div>
    <div class="row upper" style="font-family: 'Cinzel Decorative', cursive;" id="user-show">
      <% for(var i=0;i<numpi; i++ ){ %>
        <div class="col col-lg-3 col-md-4 col-sm-6 person"><img class="person-image" src="/images/man2.png">
          <p>User <%= i+1 %>
          </p>
        </div>
        <% } %>

    </div>

  </div>

  <div class="row middle-sec">
    <div class="col col-lg-4 col-md-6 col-sm-6 queue">
      <div class="queue-box">
        <ul class="queue-ul" style="list-style: none; font-family: 'Cabin Sketch', cursive;" id="history" >
          <!-- <li class="queue-li" style="border-bottom:1px solid white;">2</li>
          <li class="queue-li" style="border-bottom:1px solid white;">2</li>
          <li class="queue-li" style="border-bottom:1px solid white;">2</li>
          <li class="queue-li" style="border-bottom:1px solid white;">2</li>
          <li class="queue-li">2</li> -->
        </ul>
      </div>
    </div>
    <div class="col col-lg-4 col-md-6 col-sm-6 bingo-box" id="bingobox">
      <table class="bingo-table" style="font-family: 'Press Start 2P', cursive;">
        <tr>
          <td class="box" id="00" onclick="myMove('00')" >1</td>
          <td class="box" id="01" onclick="myMove('01')" >2</td>
          <td class="box" id="02" onclick="myMove('02')" >3</td>
          <td class="box" id="03" onclick="myMove('03')" >4</td>
          <td class="box" id="04" onclick="myMove('04')" >5</td>
        </tr>
        <tr>
          <td class="box" id="10" onclick="myMove('10')" >6</td>
          <td class="box" id="11" onclick="myMove('11')" >7</td>
          <td class="box" id="12" onclick="myMove('12')" >8</td>
          <td class="box" id="13" onclick="myMove('13')" >9</td>
          <td class="box" id="14" onclick="myMove('14')" >10</td>
        </tr>
        <tr>
          <td class="box" id="20" onclick="myMove('20')" >1</td>
          <td class="box" id="21" onclick="myMove('21')" >2</td>
          <td class="box" id="22" onclick="myMove('22')" >1</td>
          <td class="box" id="23" onclick="myMove('23')" >2</td>
          <td class="box" id="24" onclick="myMove('24')" >1</td>
        </tr>
        <tr>
          <td class="box" id="30" onclick="myMove('30')" >1</td>
          <td class="box" id="31" onclick="myMove('31')" >2</td>
          <td class="box" id="32" onclick="myMove('32')" >1</td>
          <td class="box" id="33" onclick="myMove('33')" >2</td>
          <td class="box" id="34" onclick="myMove('34')" >1</td>
        </tr>
        <tr>
          <td class="box" id="40" onclick="myMove('40')" >1</td>
          <td class="box" id="41" onclick="myMove('41')" >2</td>
          <td class="box" id="42" onclick="myMove('42')" >1</td>
          <td class="box" id="43" onclick="myMove('43')" >2</td>
          <td class="box" id="44" onclick="myMove('44')" >1</td>
        </tr>
      </table>
    </div>
    <div class="col col-lg-4 col-md-6 col-sm-6 bingo-word">
      <div class="child" style="font-family: 'Kaushan Script', cursive;">
        <p>B<br>I<br>N<br>G<br>O</p>
      </div>
      <div class="child bar">
        <div class="common-meter height"></div>
        <div class="common-meter height"></div>
        <div class="common-meter height"></div>
        <div class="common-meter height"></div>
        <div class="common-meter height"></div>
      </div>
    </div>
  </div>

  <!-- Button trigger modal -->
  <div class="rules-button-div">
    <button type="button" class="rules-button btn btn-dark" data-toggle="modal" data-target="#Rules-modal">
      <span style="font-family: 'Raleway', sans-serif;">Peek Rules</span>
    </button>
  </div>

  <!-- Modal -->
  <div class="modal fade" id="Rules-modal" tabindex="-1" role="dialog" aria-labelledby="Rules-modalCenterTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="Rules-modalLongTitle">KNOW YOUR BINGO</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p> RESPECT OTHER PLAYERS</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>


  <div id="chatbox" class="message">
    <div id="timeline">
      <ul id="joined-user">
      </ul>
    </div>
    <hr style="border-top:1px solid white;">
    <div id="message-box">
      <div class="message-user chat-message">Hello</div>
      <p>Helo</p>
    </div>
    <div id="send-box" style=" bottom: 0; margin-top: 30px; position: fixed;">
      <form method="post" id="send-message">
        <input type="text" placeholder="Enter your message" id="chat-box" autocomplete="off">
        <button type="submit" style="background: transparent; outline: none; border: none; color: white;"><i
            class="fas fa-paper-plane"></i></button>
      </form>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/noty/3.1.4/noty.min.js" integrity="sha512-lOrm9FgT1LKOJRUXF3tp6QaMorJftUjowOWiDcG5GFZ/q7ukof19V0HKx/GWzXCdt9zYju3/KhBNdCLzK8b90Q==" crossorigin="anonymous"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>

    window.onload=function(){
      var musicplay = function(){
        console.log("pepso chutiya");
        document.getElementById("my_audio").play();
        document.removeEventListener("click",musicplay);
      }
      document.addEventListener("click",musicplay)
      document.body.click();
    }

    //<----------------------|  Varibales |--------------------------------------->
    const roomid = "<%= roomid %>";
    const username = "<%= username %>";
    // Is User admin or not
    const admin='<%=admin%>';
    // Number of Players
    const players=parseInt('<%=numpi%>');
    // It will store username who's turn is going on
    var turnUsername="";
    // Dequeue variables
    let start=-1;
    // Queue for storing history
    let historyq=[];
    

    // // Bingo Board
    // var board0=[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]];
    // var board1=[[1,12,11,10,9],[13,2,22,21,8],[14,23,3,20,7],[15,24,25,4,6],[16,17,18,19,5]];
    // var board2=[[6,15,22,12,5],[14,11,7,4,21],[17,16,1,20,24],[18,2,10,8,23],[3,19,13,25,9]];
    // var board3=[[11,22,9,16,13],[24,3,17,5,14],[15,16,4,2,19],[21,1,7,8,25],[10,23,18,20,12]];
    // var board4 = [[1,6,11,16,21],[2,7,12,17,22],[3,8,13,18,23],[4,9,14,19,24],[5,10,15,20,25]];
    // var board5 = [[1,22,3,24,5],[6,17,8,19,10],[11,12,13,14,15],[16,7,18,9,20],[21,2,23,4,25]];

    // // all boxes
    // var bingoBoxes= [board0,board1,board2,board3,board4,board5];
    // // choosen boxes 
    // var assignedBox = [false,false,false,false,false,false];
    // //total boards choosen
    // var count=0;
    // // generation of random indexes
    // function returnRndInt(){
    //   return Math.floor(Math.random() * 6) + 1;
    // }

    // // map for storing bingo box against the username
    // const mapUsernames = new Map();


    // map for storing numbers and indexes
    const mapBingo = new Map();






    //<----------------------|  Taking all DOMS const |---------------------------->
    const historyQueue=document.getElementById('history');

    // Building socket connection
    const socket = io();



    //<----------------------| All Functions |-------------------------------------->

    // Function for updating history
    function updateHistory(num){
      historyQueue.innerHTML="";
      console.log(historyq);
      historyq.push(num);
      if(start==-1 || historyq.length>5) start++;
      for(let i=historyq.length-1; i>start;i--){
        // <li class="queue-li" style="border-bottom:1px solid white;">2</li>
        const li=document.createElement('li');
        li.classList.add('queue-li');
        li.style.borderBottom="1px solid white";
        li.innerText=historyq[i];
        historyQueue.appendChild(li);
      }
      const lastli=document.createElement('li');
      lastli.classList.add('queue-li');
      lastli.innerText=historyq[start];
      historyQueue.appendChild(lastli); 
    }
    var userBingo =[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]];
    // Function for creating a random user board
    function createBoard(){
      
      // let flag=true;

      // while(flag){
      //   let rndInt = returnRndInt() - 1;
        
      //   if(assignedBox[rndInt]==false){
            
      //     assignedBox[rndInt]=true;

      //     //assigning bingo to corresponding user in map
      //     mapUsernames.set(username,bingoBoxes[rndInt]);
          
      //     flag=false;
          
      //     return bingoBoxes[rndInt];
      //   }
      // }

      for(let i=0;i<5;i++){
        for(let j=0;j<5;j++){
          let x=i.toString();
          let y=j.toString();
          mapBingo.set(userBingo[i][j],x+y);
        }
      }

    }
createBoard();
    // Function of win or not
    function checkWin(userArrayBingo){
      
      let countCuts=0;

      // Row check
      for(let i=0;i<5;i++){
        let c=0;
        for(let j=0;j<5;j++){
          if(userArrayBingo[i][j]==-1)c++;
        }
        if(c==5)countCuts++;
        updateProgressBar(countCuts);
      }


      // Column check
      for(let j=0;j<5;j++){
        let c=0;
        for(let i=0;i<5;i++){
          if(userArrayBingo[i][j]==-1)c++;
        }
        if(c==5)countCuts++;
        updateProgressBar(countCuts);
      }

      // Both diagnols check
      
      //diagonal-1
      if(userArrayBingo[0][0]==-1 && userArrayBingo[1][1]==-1 && userArrayBingo[2][2]==-1 && userArrayBingo[3][3]==-1 && userArrayBingo[4][4]==-1)
        countCuts++;
      updateProgressBar(countCuts);

      //diagonal-2
      if(userArrayBingo[0][4]==-1 && userArrayBingo[1][3]==-1 && userArrayBingo[2][2]==-1 && userArrayBingo[3][1]==-1 && userArrayBingo[4][0]==-1)
        countCuts++;
      updateProgressBar(countCuts);

      // if(userWon) socket.emit('win',{username,roomid});
        if(countCuts==5)return true;
        return false;
    }

      //cut move change box color

      function cutMyMove(i,j){
        var x=i.toString()+j.toString();
        console.log(x);
        document.getElementById(x).style.backgroundColor="red";
      }


    // Function for playing Move
    function playMove(num){

      //check if num is present in map
      if(!mapBingo.has(num))return;


      updateHistory(num);
      // Play the move ( cut the number )
      mapBingo.delete(num);

      //assign -1 value in 2D array

      // let userArrayBingo=;

      for(let i=0;i<5;i++){
        for(let j=0;j<5;j++){
          if(userBingo[i][j]==num){
            userBingo[i][j]=-1;
            cutMyMove(i,j);
            break;
          }
        }
      }    
      if(turnUsername===username){
        socket.emit('move',{username,num,roomid});
      }
      // Check whether user win or not
      if(checkWin(userBingo))return "You Win";
      return "continue playing";
    }

    // Function for user move
    function myMove(index){
      if(username===turnUsername){
      var num=document.getElementById(index).innerText;
      num=parseInt(num);
      playMove(num);
      // return num;
     
      }
      else{
        new Noty({
        theme: 'relax',
        text: `You aren't allowed to play the move`,
        type: 'error',
        layout: 'topRight',
        timeout: 1500
      }).show();
      }
    }

    //





    //<----------------------| Socket Events |-------------------------------------->
    //  1) join-room: It will emitted once user join the room
    //  2) user-joined: It will get emitted to know which user has joined the room
    //  3) user-list: It will always update number of users in the room
    //  4) receive: Used to receive chat messages from other players
    //  5) send: used to send chat message to other memebers
    //  6) started: It will tell user that game has started
    //  7) turn: It will tell whose turn is going on
    //  8) win: It will tell the user has won
    //  9) move: It will send num selected by user
    //  10) other-turn: It will receive number from other user

    socket.emit('join-room',({roomid,username}));

    socket.on('user-joined',(usn)=>{
      new Noty({
        theme: 'relax',
        text: `Welcome ${usn} in game`,
        type: 'success',
        layout: 'topRight',
        timeout: 1500
      }).show();
    });

    socket.on('user-list',(userList)=>{
        const joinedlist=document.getElementById('joined-user');
        joinedlist.innerHTML="";
        const userShow=document.getElementById('user-show');
        userShow.innerHTML="";
        for(var u=0;u<userList.length;u++){
          const li=document.createElement('li');
          li.innerText=userList[u];
          joinedlist.append(li);
          if(userList[u]!==username){
            const d=document.createElement('div');
            d.classList.add('col', 'col-lg-3', 'col-md-4', 'col-sm-6', 'person');
            const imgtag=document.createElement('img');
            imgtag.src='/images/man2.png';
            imgtag.classList.add('person-image');
            d.appendChild(imgtag);
            const ptag=document.createElement('p');
            ptag.innerText=userList[u];
            d.appendChild(ptag);
            userShow.appendChild(d);
          }
        }

        if(userList.length===players && admin=='true' ){
          socket.emit('start',({  roomid,username }));
        }
    });


    socket.on('receive',({data,user})=>{
      console.log(`${data} received from user`);
    });

    socket.on('started',(usr)=>{
      new Noty({
        theme: 'relax',
        text: `Game Started by ${usr}`,
        type: 'success',
        layout: 'topRight',
        timeout: 1500
      }).show();
    });

    socket.on('turn',({usr})=>{
      // alert("turn called "+usr)
      turnUsername=usr;
      // If it's Player turn
       if(usr===username){
        new Noty({
        theme: 'relax',
        text: `It's your turn ${usr}, Please choose a number`,
        type: 'success',
        layout: 'topRight',
        timeout: 1500
      }).show();
       }
       // If it's others turn
       else{


       }
    });

    socket.on('other-turn',({username,num})=>{
      // alert(username+" "+num);
      playMove(num);
    });

    // For chatting purpose
    document.getElementById('send-message').addEventListener('submit',(e)=>{
      e.preventDefault();
      let message=document.getElementById('chat-box').value;
      socket.emit('send',({username,message,roomid}));
      document.getElementById('chat-box').value=''
    })

    function append(user, data, position) {
      const messageElement = document.createElement('div');
      const messageElement1 = document.createElement('div');
      messageElement.innerHTML = user;
      messageElement.classList.add("message-user");
      messageElement.classList.add(position);
      messageElement1.innerHTML = data;
      messageElement1.classList.add("chat-message");
      messageElement1.classList.add(position);
      document.getElementById('message-box').append(messageElement);
      document.getElementById('message-box').append(messageElement1);
      var messageBody = document.querySelector('#message-box');
      messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;

    }

    socket.on('receive',({username,message})=>{
      alert(username+"  "+message);
    })

    










    // For Changing Image

    var sound = true;
    function changeImage() {
      if (sound) {
        sound = false;
        document.getElementById("my_audio").pause();
        document.getElementById("volume-button").src = "/images/mutes.png";
      }
      else {
        sound = true;
        document.getElementById("my_audio").play();
        document.getElementById("volume-button").src = "/images/speaker.png";
      }
    }



    // For Notifications
    var flashwarning='<%= flash.warning %>';
    if(flashwarning && flashwarning.length>0) { 
    new Noty({
        theme: 'relax',
        text: "<%= flash.warning %>",
        type: 'warning',
        layout: 'topRight',
        timeout: 1500
      }).show();
    } 
    var flashsuccess='<%= flash.success %>';
    if(flashsuccess && flashsuccess.length>0) { 
    new Noty({
        theme: 'relax',
        text: "<%= flash.success %>",
        type: 'success',
        layout: 'topRight',
        timeout: 1500
      }).show();
    } 

    var flasherror='<%= flash.error %>';
         if(flasherror && flasherror.length>0) { 
         new Noty({
             theme: 'relax',
             text: "<%= flash.error %>",
             type: 'error',
             layout: 'topRight',
             timeout: 1500
            }).show();
         }

    // <div class="col col-lg-4 col-md-6 col-sm-6 bingo-word">
    //   <div class="child" style="font-family: 'Kaushan Script', cursive;">
    //     <p>B<br>I<br>N<br>G<br>O</p>
    //   </div>
    //   <div class="child bar">
    //     <div class="common-meter meter-B"></div>
    //     <div class="common-meter meter-I"></div>
    //     <div class="common-meter meter-N"></div>
    //     <div class="common-meter meter-G"></div>
    //     <div class="common-meter meter-O"></div>
    //   </div>
    // </div>

    // 1 2 3 4 5
    function updateProgressBar(cnt){
      switch(cnt){
        case 1:
          document.querySelectorAll(".common-meter")[4].classList.add("meter-B");
        break;
        case 2:
          document.querySelectorAll(".common-meter")[3].classList.add("meter-I");
        break;
        case 3:
          document.querySelectorAll(".common-meter")[2].classList.add("meter-N");
        break;
        case 4:
          document.querySelectorAll(".common-meter")[1].classList.add("meter-G");
        break;
        case 5:
          document.querySelectorAll(".common-meter")[0].classList.add("meter-O");
        break;

        default :
        console.log("Error in detection count");
      }
    }
  </script>


</body>

</html>